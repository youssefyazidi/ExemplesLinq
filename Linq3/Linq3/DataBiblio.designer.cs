#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//     Version du runtime :4.0.30319.42000
//
//     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Linq3
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Biblio")]
	public partial class DataBiblioDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Définitions de méthodes d'extensibilité
    partial void OnCreated();
    partial void InsertAdherent(Adherent instance);
    partial void UpdateAdherent(Adherent instance);
    partial void DeleteAdherent(Adherent instance);
    partial void InsertLivre(Livre instance);
    partial void UpdateLivre(Livre instance);
    partial void DeleteLivre(Livre instance);
    partial void InsertTheme(Theme instance);
    partial void UpdateTheme(Theme instance);
    partial void DeleteTheme(Theme instance);
    #endregion
		
		public DataBiblioDataContext() : 
				base(global::Linq3.Properties.Settings.Default.BiblioConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataBiblioDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataBiblioDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataBiblioDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataBiblioDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Adherent> Adherent
		{
			get
			{
				return this.GetTable<Adherent>();
			}
		}
		
		public System.Data.Linq.Table<Livre> Livre
		{
			get
			{
				return this.GetTable<Livre>();
			}
		}
		
		public System.Data.Linq.Table<Theme> Theme
		{
			get
			{
				return this.GetTable<Theme>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Adherent")]
	public partial class Adherent : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CodeA;
		
		private string _NomA;
		
		private string _Adresse;
		
		private System.Nullable<System.DateTime> _DateInscription;
		
		private string _Couleur;
		
    #region Définitions de méthodes d'extensibilité
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCodeAChanging(int value);
    partial void OnCodeAChanged();
    partial void OnNomAChanging(string value);
    partial void OnNomAChanged();
    partial void OnAdresseChanging(string value);
    partial void OnAdresseChanged();
    partial void OnDateInscriptionChanging(System.Nullable<System.DateTime> value);
    partial void OnDateInscriptionChanged();
    partial void OnCouleurChanging(string value);
    partial void OnCouleurChanged();
    #endregion
		
		public Adherent()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CodeA", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CodeA
		{
			get
			{
				return this._CodeA;
			}
			set
			{
				if ((this._CodeA != value))
				{
					this.OnCodeAChanging(value);
					this.SendPropertyChanging();
					this._CodeA = value;
					this.SendPropertyChanged("CodeA");
					this.OnCodeAChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NomA", DbType="VarChar(80)")]
		public string NomA
		{
			get
			{
				return this._NomA;
			}
			set
			{
				if ((this._NomA != value))
				{
					this.OnNomAChanging(value);
					this.SendPropertyChanging();
					this._NomA = value;
					this.SendPropertyChanged("NomA");
					this.OnNomAChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Adresse", DbType="VarChar(100)")]
		public string Adresse
		{
			get
			{
				return this._Adresse;
			}
			set
			{
				if ((this._Adresse != value))
				{
					this.OnAdresseChanging(value);
					this.SendPropertyChanging();
					this._Adresse = value;
					this.SendPropertyChanged("Adresse");
					this.OnAdresseChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateInscription", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateInscription
		{
			get
			{
				return this._DateInscription;
			}
			set
			{
				if ((this._DateInscription != value))
				{
					this.OnDateInscriptionChanging(value);
					this.SendPropertyChanging();
					this._DateInscription = value;
					this.SendPropertyChanged("DateInscription");
					this.OnDateInscriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Couleur", DbType="VarChar(50)")]
		public string Couleur
		{
			get
			{
				return this._Couleur;
			}
			set
			{
				if ((this._Couleur != value))
				{
					this.OnCouleurChanging(value);
					this.SendPropertyChanging();
					this._Couleur = value;
					this.SendPropertyChanged("Couleur");
					this.OnCouleurChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Livre")]
	public partial class Livre : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _CodeL;
		
		private string _Titre;
		
		private string _Auteur;
		
		private System.Nullable<int> _NbExemplaires;
		
		private System.Nullable<int> _CodeTh;
		
		private EntityRef<Theme> _Theme;
		
    #region Définitions de méthodes d'extensibilité
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCodeLChanging(string value);
    partial void OnCodeLChanged();
    partial void OnTitreChanging(string value);
    partial void OnTitreChanged();
    partial void OnAuteurChanging(string value);
    partial void OnAuteurChanged();
    partial void OnNbExemplairesChanging(System.Nullable<int> value);
    partial void OnNbExemplairesChanged();
    partial void OnCodeThChanging(System.Nullable<int> value);
    partial void OnCodeThChanged();
    #endregion
		
		public Livre()
		{
			this._Theme = default(EntityRef<Theme>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CodeL", DbType="VarChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string CodeL
		{
			get
			{
				return this._CodeL;
			}
			set
			{
				if ((this._CodeL != value))
				{
					this.OnCodeLChanging(value);
					this.SendPropertyChanging();
					this._CodeL = value;
					this.SendPropertyChanged("CodeL");
					this.OnCodeLChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Titre", DbType="VarChar(80)")]
		public string Titre
		{
			get
			{
				return this._Titre;
			}
			set
			{
				if ((this._Titre != value))
				{
					this.OnTitreChanging(value);
					this.SendPropertyChanging();
					this._Titre = value;
					this.SendPropertyChanged("Titre");
					this.OnTitreChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Auteur", DbType="VarChar(80)")]
		public string Auteur
		{
			get
			{
				return this._Auteur;
			}
			set
			{
				if ((this._Auteur != value))
				{
					this.OnAuteurChanging(value);
					this.SendPropertyChanging();
					this._Auteur = value;
					this.SendPropertyChanged("Auteur");
					this.OnAuteurChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NbExemplaires", DbType="Int")]
		public System.Nullable<int> NbExemplaires
		{
			get
			{
				return this._NbExemplaires;
			}
			set
			{
				if ((this._NbExemplaires != value))
				{
					this.OnNbExemplairesChanging(value);
					this.SendPropertyChanging();
					this._NbExemplaires = value;
					this.SendPropertyChanged("NbExemplaires");
					this.OnNbExemplairesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CodeTh", DbType="Int")]
		public System.Nullable<int> CodeTh
		{
			get
			{
				return this._CodeTh;
			}
			set
			{
				if ((this._CodeTh != value))
				{
					if (this._Theme.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCodeThChanging(value);
					this.SendPropertyChanging();
					this._CodeTh = value;
					this.SendPropertyChanged("CodeTh");
					this.OnCodeThChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Theme_Livre", Storage="_Theme", ThisKey="CodeTh", OtherKey="CodeTh", IsForeignKey=true)]
		public Theme Theme
		{
			get
			{
				return this._Theme.Entity;
			}
			set
			{
				Theme previousValue = this._Theme.Entity;
				if (((previousValue != value) 
							|| (this._Theme.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Theme.Entity = null;
						previousValue.Livre.Remove(this);
					}
					this._Theme.Entity = value;
					if ((value != null))
					{
						value.Livre.Add(this);
						this._CodeTh = value.CodeTh;
					}
					else
					{
						this._CodeTh = default(Nullable<int>);
					}
					this.SendPropertyChanged("Theme");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Theme")]
	public partial class Theme : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CodeTh;
		
		private string _IntituleTh;
		
		private EntitySet<Livre> _Livre;
		
    #region Définitions de méthodes d'extensibilité
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCodeThChanging(int value);
    partial void OnCodeThChanged();
    partial void OnIntituleThChanging(string value);
    partial void OnIntituleThChanged();
    #endregion
		
		public Theme()
		{
			this._Livre = new EntitySet<Livre>(new Action<Livre>(this.attach_Livre), new Action<Livre>(this.detach_Livre));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CodeTh", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CodeTh
		{
			get
			{
				return this._CodeTh;
			}
			set
			{
				if ((this._CodeTh != value))
				{
					this.OnCodeThChanging(value);
					this.SendPropertyChanging();
					this._CodeTh = value;
					this.SendPropertyChanged("CodeTh");
					this.OnCodeThChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IntituleTh", DbType="VarChar(100)")]
		public string IntituleTh
		{
			get
			{
				return this._IntituleTh;
			}
			set
			{
				if ((this._IntituleTh != value))
				{
					this.OnIntituleThChanging(value);
					this.SendPropertyChanging();
					this._IntituleTh = value;
					this.SendPropertyChanged("IntituleTh");
					this.OnIntituleThChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Theme_Livre", Storage="_Livre", ThisKey="CodeTh", OtherKey="CodeTh")]
		public EntitySet<Livre> Livre
		{
			get
			{
				return this._Livre;
			}
			set
			{
				this._Livre.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Livre(Livre entity)
		{
			this.SendPropertyChanging();
			entity.Theme = this;
		}
		
		private void detach_Livre(Livre entity)
		{
			this.SendPropertyChanging();
			entity.Theme = null;
		}
	}
}
#pragma warning restore 1591
